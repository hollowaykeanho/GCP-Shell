# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The deployments below both run a simple loop that attempts to access the hello-server
# endpoint:
#
# hello-client-allowed:
#   Runs a single pod labeled with app=hello, which matches the ingress rule for
#   the hello-server service defined in the network policy and will therefore still be
#   able to access the service when the network policy is enabled.
#
# hello-client-blocked:
#   Runs a single pod lacking the app=hello label, which does not match the ingress rule
#   for the hello-server service defined in the network policy. Once the network policy
#   is enabled, the pod will lose access to the service.

# hello-client-allowed deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-client-allowed
spec:
  # Only run a single pod
  replicas: 1

  # Control any pod labeled with app=hello
  selector:
    matchLabels:
      app: hello

  # Define pod properties
  template:

    # Ensure created pods are labeled with app=hello to match the deployment selector
    metadata:
      labels:
        app: hello
    spec:
      # This pod does not require access to the Kubernetes API server, so we prevent
      # even the default token from being mounted
      automountServiceAccountToken: false

      # Pod-level security context to define the default UID and GIDs under which to
      # run all container processes. We use 9999 for all IDs since it is unprivileged
      # and known to be unallocated on the node instances.
      securityContext:
        runAsUser: 9999
        runAsGroup: 9999
        fsGroup: 9999

      # Define container properties
      containers:
      - image: alpine:3.7
        name: hello-client-allowed

        # A simple while loop that attempts to access the hello-server service every
        # two seconds.
        command: ["sh", "-c"]
        args: ["while true; do wget -qO- --timeout=2 http://hello-server.default.svc:8080; sleep 2; done"]

        # Container-level security settings
        # Note, containers are unprivileged by default
        securityContext:
          # Prevents the container from writing to its filesystem
          readOnlyRootFilesystem: true

---
# hello-client-blocked deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-client-blocked
spec:

  # Only run a single pod
  replicas: 1

  # Control any pod labeled with app=hello
  selector:
    matchLabels:
      app: not-hello

  # Define pod properties
  template:

    # Ensure created pods are labeled with app=hello to match the deployment selector
    metadata:
      labels:
        app: not-hello
    spec:
      # This pod does not require access to the Kubernetes API server, so we prevent
      # even the default token from being mounted
      automountServiceAccountToken: false

      # Pod-level security context to define the default UID and GIDs under which to
      # run all container processes. We use 9999 for all IDs since it is unprivileged
      # and known to be unallocated on the node instances.
      securityContext:
        runAsUser: 9999
        runAsGroup: 9999
        fsGroup: 9999

      # Define container properties
      containers:
      - image: alpine:3.7
        name: hello-client-blocked

        # A simple while loop that attempts to access the hello-server service every
        # two seconds.
        command: ["sh", "-c"]
        args: ["while true; do wget -qO- --timeout=2 http://hello-server.default.svc:8080; sleep 2; done"]

        # Container-level security settings
        # Note, containers are unprivileged by default
        securityContext:
          # Prevents the container from writing to its filesystem
          readOnlyRootFilesystem: true

